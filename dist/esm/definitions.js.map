{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["/** Represents the response from a read operation */\nexport type ReadResponse = { data: string, bytesRead: number };\n\n/** Defines the interface for USB serial communication plugin */\nexport interface UsbSerialPlugin {\n  /** \n   * Returns all connected devices\n   * @returns {Promise<{devices: DeviceInfo[]}>} A promise that resolves to an object containing an array of connected devices\n   */\n  getDeviceConnections(): Promise<{ devices: DeviceInfo[] }>;\n  \n  /**\n   * Connect to a device using its deviceId\n   * @param {FullConnectionParams} options - Connection parameters including deviceId\n   * @returns {Promise<{portKey: string}>} A promise that resolves to an object containing the assigned portKey\n   */\n  openConnection(options: FullConnectionParams): Promise<{ portKey: string }>;\n\n  /**\n   * Returns all active ports\n   * @returns {Promise<{ports: string[]}>} A promise that resolves to an object containing an array of active port keys\n   */\n  getActivePorts(): Promise<{ ports: string[] }>;\n  \n  /**\n   * Disconnect from a device using its assigned portKey\n   * @param {{key: string}} options - Object containing the portKey\n   * @returns {Promise<void>} A promise that resolves when the connection is closed\n   */\n  endConnection(options: { key: string }): Promise<void>;\n  \n  /**\n   * Disconnect from all devices or specified devices\n   * @param {{keys?: string[]}} [options] - Optional object containing an array of portKeys to disconnect\n   * @returns {Promise<void>} A promise that resolves when all specified connections are closed\n   */\n  endConnections(options?: { keys?: string[] }): Promise<void>;\n  \n  /**\n   * Write a message to a device using its assigned portKey\n   * @param {{key: string, message: string, noRead?: boolean}} options - Object containing the portKey and message to write. Pass noRead to skip the immediate read response\n   * @returns {Promise<ReadResponse>} A promise that resolves when the message is written\n   */\n  write(options: { key: string, message: string, noRead?: boolean }): Promise<ReadResponse>;\n  \n  /**\n   * Read a message from a device using its assigned portKey\n   * @param {{key: string}} options - Object containing the portKey\n   * @returns {Promise<ReadResponse>} A promise that resolves to the read response\n   */\n  read(options: { key: string }): Promise<ReadResponse>;\n}\n\n/** \n * Represents parity options for serial communication\n * none => 0, even => 1, odd => 2, mark => 3, space => 4\n */\nexport type Parity = 'none' | 'even' | 'odd' | 'mark' | 'space';\n\n/** Defines basic connection parameters */\nexport interface ConnectionParams {\n  /** Baud rate (defaults to 9600) */\n  baudRate?: number\n  /** Number of data bits (defaults to 8) */\n  dataBits?: number\n  /** Number of stop bits (defaults to 1) */\n  stopBits?: number\n  /** Parity setting (defaults to 'none') */\n  parity?: Parity\n}\n\n/** Extends ConnectionParams to include deviceId */\nexport interface FullConnectionParams extends ConnectionParams {\n  /** Unique identifier for the device */\n  deviceId: number\n}\n\n/** Represents information about a connected device */\nexport interface DeviceInfo {\n  /** Unique identifier used internally */\n  deviceKey: string;\n  /** Numeric identifier for the device */\n  deviceId: number;\n  /** Product ID of the device */\n  productId: number;\n  /** Vendor ID of the device */\n  vendorId: number;\n  /** Human-readable name of the device */\n  deviceName: string;\n}\n\n/** Provides a simplified interface for handling a specific device */\nexport interface DeviceHandler {\n    /** The device being handled */\n    device: DeviceInfo;\n\n    /**\n     * Connect to the device (shorthand for UsbSerial.openConnection)\n     * @returns {Promise<void>} A promise that resolves when the connection is established\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Disconnect from the device (shorthand for UsbSerial.endConnection)\n     * @returns {Promise<void>} A promise that resolves when the connection is closed\n     */\n    disconnect(): Promise<void>;\n\n    /**\n     * Write a message to the device (shorthand for UsbSerial.write)\n     * @param {string} message - The message to write\n     * @returns {Promise<ReadResponse>} A promise that resolves when the message is written\n     */\n    write(message: string): Promise<ReadResponse>;\n\n    /**\n     * Read from the device (shorthand for UsbSerial.read)\n     * @returns {Promise<ReadResponse>} A promise that resolves to the read response\n     */\n    read(): Promise<ReadResponse>;\n}\n\n/**\n * Retrieves and constructs DeviceHandler objects for all connected USB devices.\n * \n * This function performs the following steps:\n * 1. Fetches all device connections using UsbSerialPrimitive.getDeviceConnections().\n * 2. Maps each device to a DeviceHandler object, which provides simplified methods \n *    for connecting, disconnecting, writing to, and reading from the device.\n * \n * @returns {Promise<DeviceHandler[]>} A promise that resolves to an array of DeviceHandler objects, \n * each representing a connected USB device with methods to interact with it.\n * \n * @throws {Error} If there's an issue fetching device connections or constructing DeviceHandlers.\n * \n * @example\n * const handlers = await getDeviceHandlers();\n * if (handlers.length > 0) {\n *   const firstDevice = handlers[0];\n *   await firstDevice.connect();\n *   await firstDevice.write(\"Hello, device!\");\n *   const response = await firstDevice.read();\n *   console.log(response.data);\n *   await firstDevice.disconnect();\n * }\n */\nexport type GetDeviceHandlers = () => Promise<DeviceHandler[]>;"]}