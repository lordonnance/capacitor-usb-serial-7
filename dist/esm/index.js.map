{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAIjD,MAAM,kBAAkB,GACtB,cAAc,CAAkB,WAAW,CAAC,CAAC;AAE7C,MAAM,iBAAiB,GAAsB,KAAK,IAAI,EAAE;IACtD,MAAM,iBAAiB,GAAG,MAAM,kBAAkB,CAAC,oBAAoB,EAAE,CAAC;IAC1E,MAAM,cAAc,GAAoB,iBAAiB,CAAC,OAAO,CAAC,GAAG,CACnE,MAAM,CAAC,EAAE,CAAC,CAAC;QACT,MAAM;QACN,KAAK,CAAC,OAAO,CAAC,OAA0B;YACtC,MAAM,kBAAkB,CAAC,cAAc,iBAAG,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAK,OAAO,EAAG,CAAC;QAC1F,CAAC;QAED,KAAK,CAAC,UAAU;YACd,MAAM,kBAAkB,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;QACzE,CAAC;QACD,KAAK,CAAC,KAAK,CAAC,OAAe;YACzB,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;YACzF,OAAO,QAAQ,CAAA;QACjB,CAAC;QACD,KAAK,CAAC,IAAI;YACR,OAAO,MAAM,kBAAkB,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;QACvE,CAAC;KACF,CAAC,CACH,CAAC;IACF,OAAO,cAAc,CAAC;AACxB,CAAC,CAAA;AAEH,cAAc,eAAe,CAAC;AAC9B,OAAO,EAAE,kBAAkB,IAAI,SAAS,EAAE,iBAAiB,EAAE,CAAC","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport { DeviceHandler, UsbSerialPlugin, ReadResponse, ConnectionParams, GetDeviceHandlers } from './definitions';\n\nconst UsbSerialPrimitive =\n  registerPlugin<UsbSerialPlugin>('UsbSerial');\n\n  const getDeviceHandlers: GetDeviceHandlers = async () => {\n    const deviceConnections = await UsbSerialPrimitive.getDeviceConnections();\n    const deviceHandlers: DeviceHandler[] = deviceConnections.devices.map(\n      device => ({\n        device,\n        async connect(options?: ConnectionParams): Promise<void> {\n          await UsbSerialPrimitive.openConnection({ deviceId: this.device.deviceId, ...options });\n        },\n\n        async disconnect(): Promise<void> {\n          await UsbSerialPrimitive.endConnection({ key: this.device.deviceKey });\n        },\n        async write(message: string): Promise<ReadResponse> {\n          const response = await UsbSerialPrimitive.write({ key: this.device.deviceKey, message });\n          return response\n        },\n        async read(): Promise<ReadResponse> {\n          return await UsbSerialPrimitive.read({ key: this.device.deviceKey });\n        },\n      }),\n    );\n    return deviceHandlers;\n  }\n\nexport * from './definitions';\nexport { UsbSerialPrimitive as UsbSerial, getDeviceHandlers };\n"]}